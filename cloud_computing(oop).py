# -*- coding: utf-8 -*-
"""Cloud_Computing(OOP).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iNw_g7616THnVvjsgBCyKpHo3K1ebbcZ
"""

class rental(object):
    def __init__(self):
        self.unun = []                   #list for task 1(user name and number)
        self.mnmc = []                   #list for task 3(manufacturer name and country)
        self.mncm = []                   #list for task 5(manufacturer name and model)
        self.models_not_rented = []      #list for all car models(not rented)
        self.model_rented_success = []   #list for models rented successfully
        self.rentedcars_mncm = []        #list for rented cars(manufacturer name and model)
        self.rented_to_user = []         #rented cars with user details
        self.user_rented_1 = []          #list of users who already rented atleast once
### .......................................................................................###

#TASK 1 & 2

    def add_user(self, user_name, user_number):       #Function for User name and number
        self.user_name = user_name
        self.user_number = user_number
        self.unun.append((self.user_name, self.user_number))


    def return_users(self):                           #Return all User name and number
        return self.unun
### .......................................................................................###

#TASK 3 & 4

    def add_manufacturer(self, manufacturer_name, manufacturer_country): #Function for manufacturer name and country
        self.manufacturer_name = manufacturer_name
        self.manufacturer_country = manufacturer_country
        self.mnmc.append((self.manufacturer_name, self.manufacturer_country))


    def return_manufacturers(self):             #Return all manufacturer name and country
        return self.mnmc

### .......................................................................................###

#TASK 5 & 6

    def add_rental_car(self, manufacturer_name, car_model): #Function for Manufacturer name and model
        self.manufacturer_name = manufacturer_name
        self.car_model = car_model
        self.models_not_rented.append(self.car_model)
        self.mncm.append((self.manufacturer_name, self.car_model))

    def return_cars_not_rented(self):    #Return all Manufacturer name and model
        return self.mncm

### .......................................................................................###

#TASK 7 & 8

    def rent_car(self, user_name, car_model, year, month, day): # Function for successful rental 
        c1 = 0
        self.user_name1 = user_name
        self.car_model = car_model
        self.year = year
        self.month = month
        self.day = day
        for j in self.unun[0]:
            if j == self.user_name1:
                c1 += 1
        for i in self.models_not_rented:
            if i == self.car_model:
                self.model_rented_success.append(i)
                self.models_not_rented.remove(i) 
                c1 += 1
            else:
                c1 = 0

              
        if c1 == 2:          #Confirmation of the rental
          self.rented_to_user.append((self.user_name1, self.car_model,self.year, self.month, self.day))
          if self.user_name1 not in self.user_rented_1:
            self.user_rented_1.append(self.user_name1)

          return 1
        else:
          return 0
        

    def return_cars_rented(self):
      for x in self.mncm:
        for y in self.model_rented_success:
          if x[1] == y:
            self.rentedcars_mncm.append(x)
            self.model_rented_success.remove(y)   
      return self.rentedcars_mncm 

### .......................................................................................###

#TASK 9 & 10

    def end_rental(self, user_name, car_model, year, month, day):
        self.user_name = user_name
        self.car_model = car_model
        self.year = year
        self.month = month
        self.day = day
        for rented_cars in self.rented_to_user: 
            if rented_cars[0] == self.user_name and rented_cars[1] == self.car_model:
              self.models_not_rented.append(self.car_model)
              self.rented_to_user.remove(rented_cars)
          

    def delete_car(self, car_model):
      self.car_model = car_model
      for z in self.mncm:
          if z[1] == self.car_model and self.car_model in self.models_not_rented:
            self.mncm.remove(z)

### .......................................................................................###

#TASK 11

    def delete_user(self, user_name): #Function to delete a user if never had rented a car
      self.user_name = user_name
      if self.user_name in self.user_rented_1: #Checking in the list of user rented atleast once
        print(0)
      else:
        print(1)

rental_object = rental()
rental_object.add_user("Conor Reilly", 123456)
rental_object.add_user("Shreyas", 1256)
print(rental_object.return_users())
rental_object.add_manufacturer("BMW", "Germany")
print(rental_object.return_manufacturers())

rental_object.add_rental_car("BMW", "3 Series")
rental_object.add_rental_car("Mercedes", "C class")
print(rental_object.return_cars_not_rented())

print(rental_object.rent_car("Conor Reilly", "3 Series", 2019, 1, 3))

print(rental_object.return_cars_rented())
rental_object.end_rental("Conor Reilly", "3 Series", 2019, 2, 4)

rental_object.delete_car("3 Series")
rental_object.delete_user("Shreyas")
#print(rental_object.user_rental_date("Conor Reilly", 2010, 1, 1, 2029, 2, 1))

